/* eslint-disable react-hooks/exhaustive-deps */
/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 src/assets/models/walking.glb 
*/

import { useEffect, useMemo, useRef, useState } from "react";
import { useAnimations, useGLTF, useScroll } from "@react-three/drei";
import baseScene from "../assets/models/walking.glb";
import { useFrame } from "@react-three/fiber";
// import { useFrame } from "@react-three/fiber";
const HELIX_SPEED = 6;
import * as THREE from "three";
import { fadeOnBeforeCompile } from "../utils/fadeMaterial";

const LINE_NB_POINTS = 1000;
// const CURVE_DISTANCE = 250;
const LINE_POINTS = 12000;

const Walking = (props) => {
  const [rotationAngle, setRotationAngle] = useState(0);
  const group = useRef();
  const { nodes, materials, animations } = useGLTF(baseScene);
  const { actions } = useAnimations(animations, group);

  // useEffect(() => {
  //   // console.log(actions);
  //   actions.walking.play();
  //   // window.addEventListener("rezise", adjustCharacterPosition);

  //   const intervalId = setInterval(() => {
  //     setRotationAngle(rotationAngle + 0.004);
  //   }, 16);

  //   group.current.position.z = rotationAngle;
  //   return () => {
  //     clearInterval(intervalId);
  //   };
  // });

  const lineMaterialRef = useRef();

  const curve = useMemo(() => {
    return new THREE.CatmullRomCurve3(
      [
        new THREE.Vector3(0, 0, 0),
        new THREE.Vector3(0, 0, -10),
        new THREE.Vector3(0, 0, -20),
        new THREE.Vector3(0, 0, -30),
        new THREE.Vector3(0, 0, -40),
        new THREE.Vector3(0, 0, -50),
        new THREE.Vector3(0, 0, -60),
        new THREE.Vector3(0, 0, -70),
        new THREE.Vector3(0, 0, -80),
        new THREE.Vector3(0, 0, -90),
        new THREE.Vector3(0, 0, -100),
      ],
      false,
      "catmullrom",
      0.5
    );
  });

  // const linePoints = useMemo(() => {
  //   return curve.getPoints(LINE_POINTS)
  // },[curve])

  const shape = useMemo(() => {
    const shape = new THREE.Shape();
    shape.moveTo(0, -0.2);
    shape.lineTo(0, 0.2);

    return shape;
  }, [curve]);

  return (
    <>
      <group ref={group} {...props} dispose={null}>
        <group name="Scene">
          <group
            name="Armature"
            position={[-10.5, -7.5, -7.4]}
            rotation={[Math.PI / 2, 0, 20]}
            scale={0.02}
          >
            <primitive object={nodes.mixamorigHips} />
            <skinnedMesh
              name="Body"
              geometry={nodes.Body.geometry}
              material={materials.Bodymat}
              skeleton={nodes.Body.skeleton}
            />
            <skinnedMesh
              name="Bottoms"
              geometry={nodes.Bottoms.geometry}
              material={materials.Bottommat}
              skeleton={nodes.Bottoms.skeleton}
            />
            <skinnedMesh
              name="Eyelashes"
              geometry={nodes.Eyelashes.geometry}
              material={materials.Eyelashmat}
              skeleton={nodes.Eyelashes.skeleton}
            />
            <skinnedMesh
              name="Eyes"
              geometry={nodes.Eyes.geometry}
              material={materials.Bodymat}
              skeleton={nodes.Eyes.skeleton}
            />
            <skinnedMesh
              name="Hair"
              geometry={nodes.Hair.geometry}
              material={materials.Hairmat}
              skeleton={nodes.Hair.skeleton}
            />
            <skinnedMesh
              name="Shoes"
              geometry={nodes.Shoes.geometry}
              material={materials.Shoesmat}
              skeleton={nodes.Shoes.skeleton}
            />
            <skinnedMesh
              name="Tops"
              geometry={nodes.Tops.geometry}
              material={materials.Topmat}
              skeleton={nodes.Tops.skeleton}
            />
          </group>
        </group>
      </group>

      <group position={[-2.5, -4.1, -0.3]} rotation={[0, 1.23, -3.43]}>
        <mesh>
          <extrudeGeometry
            args={[
              shape,
              {
                steps: LINE_NB_POINTS,
                bevelEnabled: false,
                extrudePath: curve,
              },
            ]}
          />
          <meshStandardMaterial
            color={"white"}
            ref={lineMaterialRef}
            transparent
            envMapIntensity={2}
            onBeforeCompile={fadeOnBeforeCompile}
          />
        </mesh>
      </group>
    </>
  );
};

export default Walking;
useGLTF.preload("/walking.glb");
